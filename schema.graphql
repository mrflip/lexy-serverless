
## --------------------------------------------------
##
##  Strong Scalar Types

scalar DateTime
scalar JSON
scalar JSONObject

enum LengthUnit { METER, MILLIMETER, INCH, FOOT }
enum WeightUnit { KILOGRAM, GRAM, OUNCEWT, POUNDWT }
enum VolumeUnit { LITER, MILLILITER, OUNCEVOL, GALLON }

type Mutation {
  bee_update(
    letters:            String!,
    datestr:            String,
    guesses:            [String],
    nogos:              [String],
  ): BeeUpdateResp!
  
  bee_del(
    letters:          String!,
  ): String!
  
  guess_add(
    letters:          String!,
    guess:            String!,
    score:            Int!,
    isPangram:        Boolean!,
    score:            Int!,
    scrabble:         Boolean!,
  ): String!
  
  guess_del(
    guess:            String!,
  ): BeeGuess!
  
}

type BeeGuess {
  word:               String!
  len:                Int!
  isPan:              Boolean!
  valid:              Boolean!
  scrabble:           Boolean!
  score:              Int!
}

type Bee {
  letters:            String!,
  datestr:            String,
  guesses:            [String!]!,
  nogos:              [String!]!,
}

type BeeUpdateResp {
  success:              Boolean!
  message:              String
  bee:                  Bee
}

type Query {
  bee_get(
    letters:            String!,
  ): Bee

  bee_list(
    limit:              Int!,
    cursor:             BeeListCursorInp
  ): BeeListPage!
}

type BeeListPage {
  bees:                [Bee!]!
  cursor:              BeeListCursor
}

input BeeListCursorInp {
  letters:              String!
}

type BeeListCursor {
  letters:              String!
}



# directive @aws_subscribe(mutations: [String]) on FIELD_DEFINITION
# 
# 
# type Subscription {
#   addProduct: Product
#   @aws_subscribe(mutations: 	["productUpdate"])
# }

schema {
  query:              	Query
  mutation:           	Mutation
  # subscription:      	Subscription
}
