
type Mutation {
  # Create a tweet for a user
  # consumer keys and tokens are not required for dynamo integration
  createTweet(
    tweet:                	String!,
    consumer_key:         	String,
    consumer_secret:      	String,
    access_token_key:     	String,
    access_token_secret:  	String,
    created_at:           	String!
  ): 	Tweet!

  # Delete User Tweet
  deleteTweet(
    tweet_id:             	String!,
    consumer_key:         	String,
    consumer_secret:      	String,
    access_token_key:     	String,
    access_token_secret:  	String
  ): 	Tweet!

  # Retweet existing Tweet
  reTweet(
    tweet_id:             	String!,
    consumer_key:         	String,
    consumer_secret:      	String,
    access_token_key:     	String,
    access_token_secret:  	String
  ): 	Tweet!

  # Update existing Tweet
  updateTweet(
    tweet_id:             	String!,
    tweet:                	String!
  ): 	Tweet!

  # Create user info is available in dynamo integration
  updateUserInfo(
    location:             	String!,
    description:          	String!,
    name:                 	String!,
    followers_count:      	Int!,
    friends_count:        	Int!,
    favourites_count:     	Int!,
    following: 	[String!]!
  ): 	User!

  create_product(
    id:           	ID!,
    name:         	String!,
    description:  	String,
    url:          	String,
    image_url:    	String,
    isKindOf:     	ID,
    manufacturer: 	String,
    category:     	String,
    mpn:          	String,
    nsn:          	String,
    gtin:         	String,
    upc:                String,
    brand:              String,
    # rating_agg:   	Float,  #
    # rating_votes: 	Int,
    # sku:          	String,
    # lot_id:       	String,
    # length:      	Float,
    # width:       	Float,
    # height:      	Float,
    # weight:      	Float,
    # color:        	String
  ): 	Product!

  update_product(
    id:           	ID!,
    name:         	String!,
    description:  	String,
    url:          	String,
    image_url:    	String,
    isKindOf:     	ID,
    manufacturer: 	String,
    category:     	String,
    mpn:          	String,
    nsn:          	String,
    gtin:         	String,
    upc:                String,
    brand:              String,
    # rating_agg:   	Float,  #
    # rating_votes: 	Int,
    # sku:          	String,
    # lot_id:       	String,
    # length:      	Float,
    # width:       	Float,
    # height:      	Float,
    # weight:      	Float,
    # color:        	String
  ): 	Product!

  delete_product(
    id:         	ID!
  ): 	Product!

}

type Query {
  meInfo(     consumer_key: 	String, consumer_secret: 	String): 	User!
  getUserInfo(handle: 	String!, consumer_key: 	String, consumer_secret: 	String): 	User!

  getProducts(limit: Int, nextToken: ProductListTokenInp): ProductListPage
  
  # search functionality is available in elasticsearch integration
  searchAllTweetsByKeyword(keyword: String!): 	TweetConnection
}

directive @aws_subscribe(mutations: [String]) on FIELD_DEFINITION


type Subscription {
  addTweet: Tweet
  @aws_subscribe(mutations: 	["createTweet"])
}

# type Merchant {
# }
# 
# type Org {
# }
# 
# type Thing {
# }
#

scalar Date

enum LengthUnit { METER, MILLIMETER, INCH, FOOT }
enum WeightUnit { KILOGRAM, GRAM, OUNCEWT, POUNDWT }
enum VolumeUnit { LITER, MILLILITER, OUNCEVOL, GALLON }

##
## Places
##

# https://schema.org/Place
type Place {
  id:           	ID!
  name:         	String!
  image_url:    	String
  scope:        	String # site, building, branch_code, floor, room, cabinet, position, etc.
  #
  # address:      	String
  # longitude:    	Float
  # latitude:     	Float
  #
  contained_in: 	Place
}

##
## Inventory
##

# Mapping of products that should be in each space
type ProductCollection {
  id:           	ID!
  name:         	String!  
}

# Totals of stock across all the installed spaces
#
#

##
## Shopping List
##


##
## Merchant
##


##
## Products
##
##

# https://schema.org/Product
type Product {
  id:           	ID!,
  name:         	String!,
  description:  	String,
  url:          	String,
  image_url:    	String,
  isKindOf:     	ID,
  manufacturer: 	String,
  brand:                String,
  category:     	String,
  mpn:          	String,
  nsn:          	String,
  gtin:         	String,
  upc:                  String,
  # rating_agg:   	Float,  #
  # rating_votes: 	Int,
  # sku:          	String,
  # lot_id:       	String,
  # length:      	Float,
  # width:       	Float,
  # height:      	Float,
  # weight:      	Float,
  # color:        	String
  #
  # offers:     	[Offer]
  # itemCondition: 	
  # hasMerchantReturnPolicy:
  # isConsumableFor: 	Product
  # isRelatedTo:     	Product
  #
}

type ProductListToken {
    product_id : String!
}
input ProductListTokenInp {
    product_id : String!
}
type ProductListPage {
  items:     [Product!]!
  nextToken: ProductListToken
}

## "Toilet Paper" is a ProductKind; "Charmin Ultra Soft 24 Mega Rolls" is a Product
type ProductKind {
  id:            	ID!
  name:          	String!
  description:   	String
  image_url:     	String
  # http://www.productontology.org/id/Racing_bicycle
}

## IndividualProduct is a specific physical object, e.g. "Macbook with
## serial #234234 and lots of stickers on it and a crack in the corner
## of its screen"
type IndividualProduct {
  id:            	ID!
  name:          	String!
  description:   	String
  serial_number: 	String
}

type Tweet {
  tweet_id:          	String!
  tweet:             	String!
  retweeted:         	Boolean
  retweet_count:     	Int
  favorited:         	Boolean
  created_at:        	String!
}

type TweetConnection {
  items: 	        [Tweet!]!
  nextToken: 	        Token
}

input TokenInput {
  tweet_id :         	String!
  created_at:        	String!
  handle:            	String!
}

type Token {
  tweet_id :         	String!
  created_at:        	String!
  handle:            	String!
}

type User {
  name:              	String!
  handle:            	String!
  location:          	String!
  description:       	String!
  followers_count:   	Int!
  friends_count:     	Int!
  favourites_count:  	Int!
  following:         	[String!]!
  topTweet:          	Tweet
  tweets(limit: Int, nextToken: TokenInput): TweetConnection

  # search functionality is available in elasticsearch integration
  searchTweetsByKeyword(keyword: 	String!): 	TweetConnection
}

schema {
  query:              	Query
  mutation:           	Mutation
  subscription:       	Subscription
}
